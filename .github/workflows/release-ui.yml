name: Release pb-mapper UI

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  get-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true          
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0            

  build-windows:
    runs-on: windows-latest
    needs: [get-release]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true          
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0            
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.1
          channel: "stable"
      - name: Install protoc on Windows
        run: |
          choco install protoc
          protoc --version       
      - name: Generate Rinf bindings
        run: |
          cd ui
          cargo install rinf_cli
          rinf gen
      - name: Build Windows app with fastforge
        run: |
          cd ui
          
          # Install fastforge
          dart pub global activate fastforge
          
          # Build and release using fastforge  
          fastforge release --name production
          
          # Move outputs to expected location
          mkdir -p build/windows/x64/Output
          if (Test-Path "dist") {
              Copy-Item -Path "dist/*" -Destination "build/windows/x64/Output/" -Recurse -Force
              ls build/windows/x64/Output/
          } else {
              echo "No dist folder found"
              exit 1
          }
      - name: Upload Windows artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}-ui
          name: "pb-mapper UI ${{ github.ref_name }}"
          body: |
            # pb-mapper UI Release ${{ github.ref_name }}
            
            Cross-platform graphical interface for pb-mapper network tunneling tool.
            
            ## Downloads
            - **Windows**: Download the .exe installer or .zip portable version
            - **Linux**: AppImage, DEB, or other Linux packages  
            - **macOS**: DMG installer
            - **Android**: APK files
            - **iOS**: Unsigned IPA (for development)
          files: ui/build/windows/x64/Output/*

  build-linux:
    runs-on: ubuntu-22.04
    needs: [get-release]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true          
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0            
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.1
          channel: "stable"
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y locate ninja-build libgtk-3-dev libayatana-appindicator3-dev libnotify-dev \
          binutils coreutils desktop-file-utils fakeroot fuse libgdk-pixbuf2.0-dev patchelf python3-pip python3-setuptools squashfs-tools strace util-linux zsync
      - name: Install protoc on Ubuntu
        run: |
          sudo apt-get install -y protobuf-compiler
          protoc --version
      - name: Generate Rinf bindings
        run: |
          cd ui
          cargo install rinf_cli
          rinf gen
      - name: Build Linux app
        run: |
          cd ui
          
          # Build Flutter Linux app
          flutter build linux --release
          
          # Create directory structure for packaging
          mkdir -p dist/1.0.0
          
          # Create ZIP package
          cd build/linux/x64/release/bundle
          zip -r ../../../../../dist/1.0.0/pb-mapper-linux.zip .
          
          # Create AppImage (basic)
          cd ../../../../../
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary and dependencies
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          
          # Copy icon
          cp assets/app_icon.png AppDir/usr/share/icons/hicolor/256x256/apps/pb-mapper.png
          cp AppDir/usr/share/icons/hicolor/256x256/apps/pb-mapper.png AppDir/pb-mapper.png
          
          # Create desktop file
          cat > AppDir/usr/share/applications/pb-mapper.desktop << EOF
          [Desktop Entry]
          Name=pb-mapper
          Comment=Network port mapping and tunneling tool
          Exec=ui
          Icon=pb-mapper
          Terminal=false
          Type=Application
          Categories=Network;
          EOF
          
          # Copy desktop file to root
          cp AppDir/usr/share/applications/pb-mapper.desktop AppDir/
          
          # Create AppRun
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export LD_LIBRARY_PATH="${HERE}/usr/bin/lib:${LD_LIBRARY_PATH}"
          exec "${HERE}/usr/bin/ui" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Build AppImage
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ./appimagetool-x86_64.AppImage AppDir dist/1.0.0/pb-mapper-linux.AppImage
      - name: Upload Linux artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}-ui
          files: ui/dist/1.0.0/*

  build-android:
    runs-on: ubuntu-latest
    needs: [get-release]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true          
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0            
      - uses: actions/setup-java@v3
        with:
          distribution: "liberica"
          java-version: "17"
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.1
          channel: "stable"
      - name: Install protoc on Ubuntu
        run: |
          sudo apt-get install -y protobuf-compiler
          protoc --version
      - name: Generate Rinf bindings
        run: |
          cd ui
          cargo install rinf_cli
          rinf gen
      - name: Build Android APKs
        run: |
          cd ui
          flutter build apk --split-per-abi --release
          cd build/app/outputs/flutter-apk
          mv app-arm64-v8a-release.apk pb-mapper-arm64-v8a.apk
          mv app-armeabi-v7a-release.apk pb-mapper-armeabi-v7a.apk
          mv app-x86_64-release.apk pb-mapper-x86_64.apk
      - name: Upload Android artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}-ui
          files: |
            ui/build/app/outputs/flutter-apk/pb-mapper-arm64-v8a.apk
            ui/build/app/outputs/flutter-apk/pb-mapper-armeabi-v7a.apk
            ui/build/app/outputs/flutter-apk/pb-mapper-x86_64.apk

  build-macos:
    runs-on: macos-latest
    needs: [get-release]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true          
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0            
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.1
          channel: "stable"
      - name: Install protoc on macOS
        run: |
          brew install protobuf
          protoc --version      
      - name: Generate Rinf bindings
        run: |
          cd ui
          cargo install rinf_cli
          rinf gen
      - name: Install appdmg
        run: |
          npm install -g appdmg
      - name: Build macOS app
        run: |
          cd ui
          PROJECT_DIR=$(pwd)

          flutter build macos --release
          cd build/macos/Build/Products/Release
          cat>appdmg.json<<EOF
          {
            "title": "pb-mapper",
            "icon": "pb-mapper.app/Contents/Resources/AppIcon.icns",
            "contents": [
              { "x": 448, "y": 344, "type": "link", "path": "/Applications" },
              { "x": 192, "y": 344, "type": "file", "path": "pb-mapper.app" }
            ]
          }
          EOF
          mkdir dist
          echo "DMG_ASSET=ui/build/macos/Build/Products/Release/dist/pb-mapper-macos.dmg" >> $GITHUB_ENV
          appdmg appdmg.json dist/pb-mapper-macos.dmg
      - name: Upload macOS artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}-ui
          files: |
            ${{env.DMG_ASSET}}

  build-ios:
    runs-on: macos-latest
    needs: [get-release]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true          
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0            
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.35.1
          channel: "stable"
      - name: Install protoc on macOS
        run: |
          brew install protobuf
          protoc --version      
      - name: Generate Rinf bindings
        run: |
          cd ui
          cargo install rinf_cli
          rinf gen
      - name: Build iOS app (no-codesign)
        run: |
          cd ui
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          mv Runner.app Payload/
          zip -r pb-mapper-ios-unsigned.ipa Payload/
      - name: Upload iOS artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}-ui
          files: |
            ui/build/ios/iphoneos/pb-mapper-ios-unsigned.ipa